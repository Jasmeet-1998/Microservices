services:
  # âœ” root quote-orders microservice
  quote-orders:
    build: 
      context: .
      dockerfile: ./apps/quote-orders/Dockerfile
      # specify the stage that we wish to target development or production stage
      target: development
    # overides the command mentiond in Dockerfile
    command: npm run start:dev quote-orders
    # loading all .env for quote-orders microservice
    env_file:
      - ./apps/quote-orders/.env
    depends_on:
      - mongodb-primary
      - mongodb-secondary
      - mongodb-arbiter
    # ðŸŽˆ volumes not needed in production
    volumes:
      - .:/usr/src/app
      # this prevents syncing the node_modules in  [our local system != inside docker container]
      # at the same time maintining the node_modules intact in the docker container
      - /usr/src/app/node_modules
    ports:
      - '3000:3000'
  # âœ” ticket-generation microservice that uses rabbitmq  
  ticket-generation:
    build: 
      context: .
      dockerfile: ./apps/ticket-generation/Dockerfile
      # specify the stage that we wish to target development or production stage
      target: development
    # overides the command mentiond in Dockerfile
    command: npm run start:dev ticket-generation
    # loading all .env for quote-orders microservice
    env_file:
      - ./apps/ticket-generation/.env
    depends_on:
      - mongodb-primary
      - mongodb-secondary
      - mongodb-arbiter
    # ðŸŽˆ volumes not needed in production
    volumes:
      - .:/usr/src/app
      # this prevents syncing the node_modules in  [our local system != inside docker container]
      # at the same time maintining the node_modules intact in the docker container
      - /usr/src/app/node_modules
  # âœ” rabbit mq container
  rabbitmq:
    image: rabbitmq
    ports:
      - '5672:5672'
  # âœ” mongodb bitnami image with replica set to take advantage of Atomicity in MongoDB transaction across multiple collection/documents
  mongodb-primary:
    image: docker.io/bitnami/mongodb:5.0
    environment:
      - MONGODB_ADVERTISED_HOSTNAME=mongodb-primary
      - MONGODB_REPLICA_SET_MODE=primary
      - MONGODB_ROOT_PASSWORD=password123
      - MONGODB_REPLICA_SET_KEY=replicasetkey123
    volumes:
      - 'mongodb_master_data:/bitnami/mongodb'
    # ðŸŽˆ no need to specify ports if u are using the mongodb atlas cloud to connect
    ports:
      - '27017:27017'

  mongodb-secondary:
    image: docker.io/bitnami/mongodb:5.0
    depends_on:
      - mongodb-primary
    environment:
      - MONGODB_ADVERTISED_HOSTNAME=mongodb-secondary
      - MONGODB_REPLICA_SET_MODE=secondary
      - MONGODB_INITIAL_PRIMARY_HOST=mongodb-primary
      - MONGODB_INITIAL_PRIMARY_ROOT_PASSWORD=password123
      - MONGODB_REPLICA_SET_KEY=replicasetkey123

  mongodb-arbiter:
    image: docker.io/bitnami/mongodb:5.0
    depends_on:
      - mongodb-primary
    environment:
      - MONGODB_ADVERTISED_HOSTNAME=mongodb-arbiter
      - MONGODB_REPLICA_SET_MODE=arbiter
      - MONGODB_INITIAL_PRIMARY_HOST=mongodb-primary
      - MONGODB_INITIAL_PRIMARY_ROOT_PASSWORD=password123
      - MONGODB_REPLICA_SET_KEY=replicasetkey123
# ðŸŽˆ check alternatives for this as for production we dont need the volumes mapping
volumes:
  mongodb_master_data:
    driver: local